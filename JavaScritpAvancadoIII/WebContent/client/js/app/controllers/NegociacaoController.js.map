{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_ordemAtual","_service","NegociacaoService","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","console","log","err","texto","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastrar","mensagem","importa","apaga","esvazia","Negociacao","DateHelper","textoParaData","value","parseInt","parseFloat","focus","coluna","inverteOrdem","ordena","a","b"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController {\r\n\r\n\tconstructor() { // para garantir que vamos buscar o DOM somente uma vez e não sempre que o método for chamado\r\n\t\tlet $ = document.querySelector.bind(document); // Neste caso let $ = document.querySelector; como o querySelector é imutavel não daria para ser utiilizado por isso\r\n\t\t// alteramos para o atual, garantindo a associação com document\r\n\r\n\t\tthis._inputData = $(\"#data\");\r\n\t\tthis._inputQuantidade = $(\"#quantidade\");\r\n\t\tthis._inputValor = $(\"#valor\");\r\n\r\n\t\tthis._listaNegociacoes = new Bind(new ListaNegociacoes(), new NegociacoesView($(\"#negociacoesView\")), \"adiciona\", \"esvazia\", \"ordena\", \"inverteOrdem\");\r\n\t\t// ProxyFactory.create(new ListaNegociacoes(), [\"adiciona\", \"esvazia\"], model => this._negociacoesView.update(model));\r\n\r\n\t\tthis._mensagem = new Bind(new Mensagem(), new MensagemView($(\"#mensagemView\")), \"texto\");\r\n\t\t// ProxyFactory.create(new Mensagem(), [\"texto\"], (model) => this._mensagemView.update(model));\r\n\r\n\t\tthis._ordemAtual = '';\r\n\t\tthis._service = new NegociacaoService();\r\n\t\tthis._init();\r\n\t}\r\n\r\n\t_init() {\r\n\t\tthis._service\r\n\t\t\t.lista()\r\n\t\t\t.then(negociacoes =>\r\n\t\t\t\tnegociacoes.forEach(negociacao =>\r\n\t\t\t\t\tthis._listaNegociacoes.adiciona(negociacao)))\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tthis._mensagem.texto = err;\r\n\t\t\t});\r\n\r\n\t\t// Outra forma de fazer a mesma coisa abaixo.\r\n\t\t// ConnectionFactory.getConnection()\r\n\t\t// \t.then(connection => new NegociacaoDao(connection))\r\n\t\t// \t.then(dao => dao.listaTodos())\r\n\t\t// \t.then(negociacoes => negociacoes\r\n\t\t// \t\t.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao)))\r\n\t\t// \t.catch(err => {\r\n\t\t// \t\tconsole.log(err);\r\n\t\t// \t\tthis._mensagem.texto = err;\r\n\t\t// \t});\r\n\r\n\t\t// ConnectionFactory.getConnection().then(connection => {\r\n\t\t// \tnew NegociacaoDao(connection).listaTodos().then(negociacoes => {\r\n\t\t// \t\tthis._listaNegociacoes.adiciona(negociacoes);\r\n\t\t// \t});\r\n\t\t// });\r\n\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.importaNegociacoes();\r\n\t\t}, 9000);\r\n\t}\r\n\r\n\tadiciona(event) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tlet negociacao = this._criaNegociacao();\r\n\t\tthis._service\r\n\t\t\t.cadastrar(negociacao)\r\n\t\t\t.then(mensagem => {\r\n\t\t\t\tthis._listaNegociacoes.adiciona(negociacao);\r\n\t\t\t\tthis._mensagem.texto = mensagem;\r\n\t\t\t}).catch(err => {\r\n\t\t\t\tthis._mensagem.texto = err;\r\n\t\t\t});\r\n\t}\r\n\r\n\timportaNegociacoes() {\r\n\t\tthis._service\r\n\t\t\t.importa(this._listaNegociacoes.negociacoes)\r\n\t\t\t.then(negociacoes => negociacoes.forEach(negociacao => {\r\n\t\t\t\tthis._listaNegociacoes.adiciona(negociacao);\r\n\t\t\t\tthis._mensagem.texto = 'Negociação do periodo importada,';\r\n\t\t\t}))\r\n\t\t\t.catch(err => this._mensagem.texto = err);\r\n\r\n\t\t/*\r\n\t\t * let promise = service.obterNegociacoesDaSemana(); promise.then(negociacoes => { negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n\t\t * this._mensagem.texto = \"Negociações importadas com sucesso!\"; }) .catch(err => this._mensagem.texto = err);\r\n\t\t */\r\n\r\n\t\t/*\r\n\t\t * service.obterNegociacoesDaSemana((err, negociacoes) => { if(err) { this._mensagem.texto = err; return; }\r\n\t\t * \r\n\t\t * negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao)); this._mensagem.texto = \"Negociações importadas com sucesso!\"; });\r\n\t\t */\r\n\t}\r\n\r\n\tapaga() {\r\n\t\tthis._service\r\n\t\t\t.apaga()\r\n\t\t\t.then(mensagem => {\r\n\t\t\t\tthis._mensagem.texto = mensagem;\r\n\t\t\t\tthis._listaNegociacoes.esvazia();\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis._mensagem.texto = err;\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\t_criaNegociacao() {\r\n\t\treturn new Negociacao(DateHelper.textoParaData(this._inputData.value), parseInt(this._inputQuantidade.value), parseFloat(this._inputValor.value));\r\n\t}\r\n\t_limpaFormulario() {\r\n\t\tthis._inputData.value = \"\";\r\n\t\tthis._inputQuantidade.value = 1;\r\n\t\tthis._inputValor.value = 0.0;\r\n\r\n\t\tthis._inputData.focus();\r\n\t}\r\n\r\n\tordena(coluna) {\r\n\t\t// ainda vamos implementar o método!\r\n\t\tconsole.log(\"Testando ordenação\" + coluna);\r\n\t\tif (this._ordemAtual == coluna) {\r\n\t\t\t// inverte a ordem da lista!\r\n\t\t\tthis._listaNegociacoes.inverteOrdem();\r\n\t\t} else {\r\n\t\t\tthis._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);\r\n\t\t}\r\n\t\tthis._ordemAtual = coluna;\r\n\t}\r\n}"]}