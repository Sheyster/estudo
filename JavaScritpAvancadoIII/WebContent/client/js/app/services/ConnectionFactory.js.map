{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAY;;AAEjC;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;;AAEI;AACA;AACA;AACA;;AAEA,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AATL;AAAA;AAAA,4CAW2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACH,qBAVD;;AAYAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAY;AAC3B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBA9BM,CAAP;AA+BH;AA3CL;AAAA;AAAA,yCA6CwBrB,UA7CxB,EA6CoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;;AAEDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAND;AAOH;AArDL;AAAA;AAAA,8CAuD6B;AACrB,oBAAI5B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACAC,4BAAQ,IAAR;AACH;AACJ;AA7DL;;AAAA;AAAA;AA+DH,CAzEuB,EAAxB;;AA2EA","file":"ConnectionFactory.js","sourcesContent":["// fazendo desta forma eu torno a classe privada. padrão = module pater\r\nvar ConnectionFactory = (function () {\r\n\r\n    // const não permite você reatribuir o valor de uma variavel\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        // a) getConnection vai ser um método estático\r\n        // b) getConnection vai retornar uma promise\r\n        // c) não importa o número de vezes que eu chamar o método estático, a conexão sempre será a mesma\r\n        // d) o programado não pode chamar o close diretamente. Ela só pode ser fechada pela própria ConnectionFactory \r\n\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory!');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStore(e.target.result);\r\n\r\n                    // stores.forEach(store => {\r\n                    // if (e.target.result.objectStoreNames.contains(store)) {\r\n                    //     e.target.deleteObjectStore(store);\r\n                    // }\r\n\r\n                    // e.target.result.createobjectStore(store, { autoIncrement: true });\r\n                    // });\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if (!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function () {\r\n                            throw new Error('Você não pode fechar diretamente a conexão.');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStore(connection) {\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n                close = null;\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\n//var ConnectionFactory = tmp();"]}