{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;kCAESC,G,EAAK;AAClB,UAAIA,IAAIC,EAAR,EAAY;AACX,eAAOD,GAAP;AACA,OAFD,MAEO;AACN,cAAM,IAAIE,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACA;AACD;;;wBAEGC,G,EAAK;AAAA;;AACR,aAAOC,MAAMD,GAAN,EACLE,IADK,CACA;AAAA,eAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OADA,EAELM,IAFK,CAEA;AAAA,eAAON,IAAIQ,IAAJ,EAAP;AAAA,OAFA,CAAP;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;yBAEIJ,G,EAAKK,I,EAAM;AAAA;;AACf,aAAOJ,MAAMD,GAAN,EAAW;AACjBM,iBAAS,EAAE,gBAAgB,kBAAlB,EADQ;AAEjBC,gBAAQ,MAFS;AAGjBC,cAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHW,OAAX,EAKLH,IALK,CAKA;AAAA,eAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OALA,CAAP;;AAQA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA","file":"HttpService.js","sourcesContent":["class HttpService {\r\n\r\n\t_handleErrors(res) {\r\n\t\tif (res.ok) {\r\n\t\t\treturn res;\r\n\t\t} else {\r\n\t\t\tthrow new Error(res.statusText);\r\n\t\t}\r\n\t}\r\n\r\n\tget(url) {\r\n\t\treturn fetch(url)\r\n\t\t\t.then(res => this._handleErrors(res))\r\n\t\t\t.then(res => res.json());\r\n\r\n\t\t// return new Promise((resolve, reject) => {\r\n\t\t// \tlet xhr = new XMLHttpRequest();\r\n\t\t// \txhr.open(\"GET\", url);\r\n\r\n\t\t// \txhr.onreadystatechange = () => {\r\n\t\t// \t\t/*\r\n\t\t// \t\t * 0: requisição ainda não iniciada\r\n\t\t// \t\t * \r\n\t\t// \t\t * 1: conexão com o servidor estabelecidad\r\n\t\t// \t\t * \r\n\t\t// \t\t * 2: requisição recebida\r\n\t\t// \t\t * \r\n\t\t// \t\t * 3: processando requisição\r\n\t\t// \t\t * \r\n\t\t// \t\t * 4: requisição concluida e a resposta esta pronta\r\n\t\t// \t\t */\r\n\t\t// \t\tif(xhr.readyState == 4){\r\n\t\t// \t\t\tif(xhr.status == 200){\r\n\t\t// \t\t\t\tconsole.log(\"Obtendo as negociações do servidor.\");\r\n\t\t// \t\t\t\tconsole.log(JSON.parse(xhr.responseText));\r\n\r\n\t\t// \t\t\t\tresolve(JSON.parse(xhr.responseText));\r\n\t\t// \t\t\t} else {\r\n\t\t// \t\t\t\tconsole.log(\"Não foi possível obter as negociações do servidor.\");\r\n\t\t// \t\t\t\tconsole.log(xhr.responseText);\r\n\t\t// \t\t\t\treject(xhr.responseText)\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\r\n\t\t// \t};\r\n\r\n\t\t// \txhr.send();\r\n\t\t// });\r\n\t}\r\n\r\n\tpost(url, dado) {\r\n\t\treturn fetch(url, {\r\n\t\t\theaders: { 'Content-type': 'application/json' },\r\n\t\t\tmethod: 'post',\r\n\t\t\tbody: JSON.stringify(dado)\r\n\t\t})\r\n\t\t\t.then(res => this._handleErrors(res));\r\n\r\n\r\n\t\t// return new Promise((resolve, reject) => {\r\n\r\n\t\t// \tlet xhr = new XMLHttpRequest();\r\n\t\t// \txhr.open(\"POST\", url, true);\r\n\t\t// \txhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n\t\t// \txhr.onreadystatechange = () => {\r\n\r\n\t\t// \t\tif (xhr.readyState == 4) {\r\n\r\n\t\t// \t\t\tif (xhr.status == 200) {\r\n\r\n\t\t// \t\t\t\tresolve(JSON.parse(xhr.responseText));\r\n\t\t// \t\t\t} else {\r\n\r\n\t\t// \t\t\t\treject(xhr.responseText);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\t\t// \t};\r\n\t\t// \txhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.\r\n\t\t// });\r\n\t\t/*\r\n\t\t  * return new Promise((resolve, reject) => {\r\n\t\t  * \r\n\t\t  * let xhr = new XMLHttpRequest(); xhr.open(\"POST\", url, true); xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\t\t  * \r\n\t\t  * });\r\n\t\t  */\r\n\r\n\t}\r\n}"]}